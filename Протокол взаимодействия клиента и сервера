# Протокол взаимодействия клиента и сервера

## 1. Регистрация пользователя

### Запрос от клиента

- **Метод:** `POST`
- **URL:** `/register`
- **Заголовки:**
  - `Content-Type: application/json`
  
- **Тело запроса (JSON):**
  ```json
  {
      "username": "имя_пользователя",
      "password": "пароль",
      "email": "email@example.com"
  }

### Ответ от сервера

- **Успех:** `Статус: 200 OK`

- **Тело ответа (JSON):**
  ```json
{
    "status": "success",
    "userId": 12345
}

- **Ошибка:** `Статус: 400 Bad Request или 409 Conflict`

- **Тело ответа (JSON):**
  ```json
{
    "status": "error",
    "message": "Причина ошибки"
}

## 2. Проверка формата email

### Запрос от клиента
- **Метод:** `POST`
- **URL:** `/validateEmail`
- **Заголовки:**
  - `Content-Type: application/json`

- **Тело запроса (JSON):**
  ```json
{
    "email": "email@example.com"
}

### Ответ от сервера

- **Успех:** `Статус: 200 OK`

- **Тело ответа (JSON):**
  ```json
{
    "status": "valid"
}

- **Ошибка:** `Статус: 400 Bad Request`

- **Тело ответа (JSON):**
  ```json
{
    "status": "invalid",
    "message": "Некорректный адрес электронной почты."
}

## 3. Обработка ошибок

- **При возникновении ошибок, сервер должен возвращать соответствующий статус и сообщение. Примеры ошибок:**

- **400 Bad Request:** Неправильные данные (например, пустые поля, несовпадающие пароли).
- **409 Conflict:** Пользователь с таким именем или email уже существует.
- **500 Internal Server Error:** Ошибка на стороне сервера.
